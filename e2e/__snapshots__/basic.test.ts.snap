// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Bash .node-version: Bash 1`] = `
"set -e
eval "$(fnm env)"
fnm install
fnm use
if [ "$(node --version)" != "v8.11.3" ]; then
  echo "Expected node version to be v8.11.3. Got $(node --version)"
  exit 1
fi"
`;

exports[`Bash .nvmrc: Bash 1`] = `
"set -e
eval "$(fnm env)"
fnm install
fnm use
if [ "$(node --version)" != "v8.11.3" ]; then
  echo "Expected node version to be v8.11.3. Got $(node --version)"
  exit 1
fi"
`;

exports[`Bash \`fnm ls\` with nothing installed: Bash 1`] = `
"set -e
eval "$(fnm env)"
if [ "$(fnm ls)" != "* system" ]; then
  echo "Expected fnm ls to be * system. Got $(fnm ls)"
  exit 1
fi"
`;

exports[`Bash basic usage: Bash 1`] = `
"set -e
eval "$(fnm env)"
fnm install v8.11.3
fnm use v8.11.3
if [ "$(node --version)" != "v8.11.3" ]; then
  echo "Expected node version to be v8.11.3. Got $(node --version)"
  exit 1
fi"
`;

exports[`Bash package.json engines.node with semver range: Bash 1`] = `
"set -e
eval "$(fnm env --resolve-engines)"
fnm install
fnm use
if [ "$(node --version)" != "v6.17.0" ]; then
  echo "Expected node version to be v6.17.0. Got $(node --version)"
  exit 1
fi"
`;

exports[`Bash package.json engines.node: Bash 1`] = `
"set -e
eval "$(fnm env --resolve-engines)"
fnm install
fnm use
if [ "$(node --version)" != "v8.11.3" ]; then
  echo "Expected node version to be v8.11.3. Got $(node --version)"
  exit 1
fi"
`;

exports[`Bash resolves partial semver: Bash 1`] = `
"set -e
eval "$(fnm env)"
fnm install 6
fnm use 6
if [ "$(node --version)" != "v6.17.1" ]; then
  echo "Expected node version to be v6.17.1. Got $(node --version)"
  exit 1
fi"
`;

exports[`Bash when .node-version and .nvmrc are in sync, it throws no error: Bash 1`] = `
"set -e
eval "$(fnm env)"
fnm install
fnm use
if [ "$(node --version)" != "v11.10.0" ]; then
  echo "Expected node version to be v11.10.0. Got $(node --version)"
  exit 1
fi"
`;

exports[`Fish .node-version: Fish 1`] = `
"fnm env | source
fnm install
fnm use
set ____test____ (node --version)
if test "$____test____" != "v8.11.3"
  echo "Expected node version to be v8.11.3. Got $____test____"
  exit 1
end"
`;

exports[`Fish .nvmrc: Fish 1`] = `
"fnm env | source
fnm install
fnm use
set ____test____ (node --version)
if test "$____test____" != "v8.11.3"
  echo "Expected node version to be v8.11.3. Got $____test____"
  exit 1
end"
`;

exports[`Fish \`fnm ls\` with nothing installed: Fish 1`] = `
"fnm env | source
set ____test____ (fnm ls)
if test "$____test____" != "* system"
  echo "Expected fnm ls to be * system. Got $____test____"
  exit 1
end"
`;

exports[`Fish basic usage: Fish 1`] = `
"fnm env | source
fnm install v8.11.3
fnm use v8.11.3
set ____test____ (node --version)
if test "$____test____" != "v8.11.3"
  echo "Expected node version to be v8.11.3. Got $____test____"
  exit 1
end"
`;

exports[`Fish package.json engines.node with semver range: Fish 1`] = `
"fnm env --resolve-engines | source
fnm install
fnm use
set ____test____ (node --version)
if test "$____test____" != "v6.17.0"
  echo "Expected node version to be v6.17.0. Got $____test____"
  exit 1
end"
`;

exports[`Fish package.json engines.node: Fish 1`] = `
"fnm env --resolve-engines | source
fnm install
fnm use
set ____test____ (node --version)
if test "$____test____" != "v8.11.3"
  echo "Expected node version to be v8.11.3. Got $____test____"
  exit 1
end"
`;

exports[`Fish resolves partial semver: Fish 1`] = `
"fnm env | source
fnm install 6
fnm use 6
set ____test____ (node --version)
if test "$____test____" != "v6.17.1"
  echo "Expected node version to be v6.17.1. Got $____test____"
  exit 1
end"
`;

exports[`Fish when .node-version and .nvmrc are in sync, it throws no error: Fish 1`] = `
"fnm env | source
fnm install
fnm use
set ____test____ (node --version)
if test "$____test____" != "v11.10.0"
  echo "Expected node version to be v11.10.0. Got $____test____"
  exit 1
end"
`;

exports[`PowerShell .node-version: PowerShell 1`] = `
"$ErrorActionPreference = "Stop"
fnm env | Out-String | Invoke-Expression
fnm install
fnm use
if ( "$(node --version)" -ne "v8.11.3" ) { echo "Expected node version to be v8.11.3. Got $(node --version)"; exit 1 }"
`;

exports[`PowerShell .nvmrc: PowerShell 1`] = `
"$ErrorActionPreference = "Stop"
fnm env | Out-String | Invoke-Expression
fnm install
fnm use
if ( "$(node --version)" -ne "v8.11.3" ) { echo "Expected node version to be v8.11.3. Got $(node --version)"; exit 1 }"
`;

exports[`PowerShell \`fnm ls\` with nothing installed: PowerShell 1`] = `
"$ErrorActionPreference = "Stop"
fnm env | Out-String | Invoke-Expression
if ( "$(fnm ls)" -ne "* system" ) { echo "Expected fnm ls to be * system. Got $(fnm ls)"; exit 1 }"
`;

exports[`PowerShell basic usage: PowerShell 1`] = `
"$ErrorActionPreference = "Stop"
fnm env | Out-String | Invoke-Expression
fnm install v8.11.3
fnm use v8.11.3
if ( "$(node --version)" -ne "v8.11.3" ) { echo "Expected node version to be v8.11.3. Got $(node --version)"; exit 1 }"
`;

exports[`PowerShell package.json engines.node with semver range: PowerShell 1`] = `
"$ErrorActionPreference = "Stop"
fnm env --resolve-engines | Out-String | Invoke-Expression
fnm install
fnm use
if ( "$(node --version)" -ne "v6.17.0" ) { echo "Expected node version to be v6.17.0. Got $(node --version)"; exit 1 }"
`;

exports[`PowerShell package.json engines.node: PowerShell 1`] = `
"$ErrorActionPreference = "Stop"
fnm env --resolve-engines | Out-String | Invoke-Expression
fnm install
fnm use
if ( "$(node --version)" -ne "v8.11.3" ) { echo "Expected node version to be v8.11.3. Got $(node --version)"; exit 1 }"
`;

exports[`PowerShell resolves partial semver: PowerShell 1`] = `
"$ErrorActionPreference = "Stop"
fnm env | Out-String | Invoke-Expression
fnm install 6
fnm use 6
if ( "$(node --version)" -ne "v6.17.1" ) { echo "Expected node version to be v6.17.1. Got $(node --version)"; exit 1 }"
`;

exports[`PowerShell when .node-version and .nvmrc are in sync, it throws no error: PowerShell 1`] = `
"$ErrorActionPreference = "Stop"
fnm env | Out-String | Invoke-Expression
fnm install
fnm use
if ( "$(node --version)" -ne "v11.10.0" ) { echo "Expected node version to be v11.10.0. Got $(node --version)"; exit 1 }"
`;

exports[`Zsh .node-version: Zsh 1`] = `
"set -e
eval "$(fnm env)"
fnm install
fnm use
if [ "$(node --version)" != "v8.11.3" ]; then
  echo "Expected node version to be v8.11.3. Got $(node --version)"
  exit 1
fi"
`;

exports[`Zsh .nvmrc: Zsh 1`] = `
"set -e
eval "$(fnm env)"
fnm install
fnm use
if [ "$(node --version)" != "v8.11.3" ]; then
  echo "Expected node version to be v8.11.3. Got $(node --version)"
  exit 1
fi"
`;

exports[`Zsh \`fnm ls\` with nothing installed: Zsh 1`] = `
"set -e
eval "$(fnm env)"
if [ "$(fnm ls)" != "* system" ]; then
  echo "Expected fnm ls to be * system. Got $(fnm ls)"
  exit 1
fi"
`;

exports[`Zsh basic usage: Zsh 1`] = `
"set -e
eval "$(fnm env)"
fnm install v8.11.3
fnm use v8.11.3
if [ "$(node --version)" != "v8.11.3" ]; then
  echo "Expected node version to be v8.11.3. Got $(node --version)"
  exit 1
fi"
`;

exports[`Zsh package.json engines.node with semver range: Zsh 1`] = `
"set -e
eval "$(fnm env --resolve-engines)"
fnm install
fnm use
if [ "$(node --version)" != "v6.17.0" ]; then
  echo "Expected node version to be v6.17.0. Got $(node --version)"
  exit 1
fi"
`;

exports[`Zsh package.json engines.node: Zsh 1`] = `
"set -e
eval "$(fnm env --resolve-engines)"
fnm install
fnm use
if [ "$(node --version)" != "v8.11.3" ]; then
  echo "Expected node version to be v8.11.3. Got $(node --version)"
  exit 1
fi"
`;

exports[`Zsh resolves partial semver: Zsh 1`] = `
"set -e
eval "$(fnm env)"
fnm install 6
fnm use 6
if [ "$(node --version)" != "v6.17.1" ]; then
  echo "Expected node version to be v6.17.1. Got $(node --version)"
  exit 1
fi"
`;

exports[`Zsh when .node-version and .nvmrc are in sync, it throws no error: Zsh 1`] = `
"set -e
eval "$(fnm env)"
fnm install
fnm use
if [ "$(node --version)" != "v11.10.0" ]; then
  echo "Expected node version to be v11.10.0. Got $(node --version)"
  exit 1
fi"
`;
